#1. 基础			
   1.1. 正确使用 `equals` 方法（是方法，是对象中值的的比较，==是运算符，检查两个对象是否指向相同的位置）

1. 【强制】关于`hashCode`和equals的处理，遵循如下规则： 1） 只要覆写equals，就必须覆写`hashCode`。

   []: https://blog.csdn.net/qq_39382769/article/details/80485878

    

1. 2） 因为Set 存储的是不重复的对象，依据` hashCode`和`equals`进行判断，所以 Set 存储的对象必须覆 写这两个方法。 3） 如果自定义对象作为Map 的键，那么必须覆写`hashCode` 和`equals`。 说明：String 已覆写`hashCode` 和`equals`方法，所以我们可以愉快地使用 String 对象作为key来使用。 

1. 1.2. 整型包装类值的比较

（1）、除了8大基本数据类型的包装类外还有两个`BigInteger`和`BigDecimal`。这两个包装类前者是整型后者是实数类型。

### java中的自动拆装箱

   基本类型与包装类型在某些操作符的作用下, 包装类型调用valueOf()方法将原始类型值转换成对应的包装类对象的过程, 称之为自动装箱; 反之调用xxxValue()方法将包装类对象转换成原始类型值的过程, 则称之为自动拆箱。这种做法使程序员的代码变得更加简洁, 不再需要进行显式转换。（简单一点说，装箱就是  自动将基本数据类型转换为包装器类型；拆箱就是  自动将包装器类型转换为基本数据类型。）

```
public static void main(String[] args) {

        int i1 = 123;
        int i2 = 123;

        System.out.println(i1==i2); //true;

        Integer i3 = new Integer(124);
        //将一个基本数据类型的值转换为对应的引用类型的对象。
        Integer i4 = new Integer(124);

        System.out.println(i3==i4);//false
    }

```

基本类型的变量，变量直接存储的是“值”，==来进行比较时，比较的就是 “值” 本身。new Integer() 会在内存中开辟空间并引用，所以i3和i4指向不同的对象。

### 第二次比较

```
public static void main(String[] args) {
        int i = new Integer(188);
        int a = new Integer(188);
        System.out.println(a==i);//true
    }

```

这里，Integer类型被自动拆箱，转化为int类型，然后再进行比较数值大小。

### 第三次比较

 包装类提供了对象的缓存，具体的实现方式为在类中预先创建频繁使用的包装类对象，当需要使用某个包装类的对象时，如果该对象封装的值在缓存的范围内，就返回缓存的对象，否则创建新的对象并返回。
       包装类Integer，基本类型int缓存-128~127（默认为127）。

```
public static void main(String[] args) {
        Integer i1 = 123;
        Integer i2 = 123;

        System.out.println(i1==i2); //true;

        Integer i3 = 255;
        Integer i4 = 255;
        System.out.println(i3==i4); //false;
    }

```

 int类型的值在常量池中初始化，只初始化-128~127的范围。所以当值在-128~127中时，是直接从常量池中取值，而常量池中的常量是被共享的，Integer类型-128~127数值也会从常量池取值。所以i1和i2指向常量池中的同一个对象。

### 第四次比较

```
public static void main(String[] args) {
        Integer i5 = 266;//自动封箱
        int i6 = 266;
        
        //自动拆箱
        System.out.println(i5==i6); //true;
    }

```

 包装类与基本类型的比较，在比较的时候会将包装类拆箱成基本类型进行比较。

 1.3. BigDecimal
ava中提供了大数字(超过16位有效位)的操作类,即 java.math.BinInteger 类和 java.math.BigDecimal 类,用于高精度计算.其中 BigInteger 类是针对大整数的处理类,而 BigDecimal 类则是针对大小数的处理类.BigDecimal 类的实现用到了 BigInteger类,不同的是 BigDecimal 加入了小数的概念.float和Double只能用来做科学计算或者是工程计算;在商业计算中,对数字精度要求较高,必须使用 BigInteger 类和 BigDecimal 类,它支持任何精度的定点数,可以用它来精确计算货币值。
由于在运算的时候，float类型和double很容易丢失精度，所以一般不用来做计算货币。

   1.3.1. BigDecimal 的用处

float和Double只能用来做科学计算或者是工程计算;在商业计算中,对数字精度要求较高,必须使用 BigInteger 类和 BigDecimal 类,它支持任何精度的定点数,可以用它来精确计算货币值.

   1.3.2. BigDecimal 的大小比较
```BigDecimal a = new BigDecimal (101);
BigDecimal b = new BigDecimal (111);
 
//使用compareTo方法比较
//注意：a、b均不能为null，否则会报空指针
if(a.compareTo(b) == -1){
    System.out.println("a小于b");
}
 
if(a.compareTo(b) == 0){
    System.out.println("a等于b");
}
 
if(a.compareTo(b) == 1){
    System.out.println("a大于b");
}
 
if(a.compareTo(b) > -1){
    System.out.println("a大于等于b");
}
 
if(a.compareTo(b) < 1){
    System.out.println("a小于等于b");
}
```




   1.3.3. BigDecimal 保留几位小数

```BigDecimal保留小数位
   public static void main(String[] args) throws IllegalAccessException {
    BigDecimal decimal = new BigDecimal("1.12345");
    System.out.println(decimal);
    BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_HALF_DOWN);
    System.out.println(setScale);
    
    BigDecimal setScale1 = decimal.setScale(4,BigDecimal.ROUND_HALF_UP);
    System.out.println(setScale1);
}
```



   1.3.4. `BigDecimal` 的使用注意事项

**比较**

必须使用`compareTo`进行比较，看返回结果是-1、0、1判断两个数是A大于B，等于B，还是小于B。

```
calcResult.getTotalPromotion().compareTo(BigDecimal.ZERO) > 0
dangdangVipDiscount.compareTo(BigDecimal.valueOf(100)) == 0
```

  **转换**

`BigDecimal`没有提供自动装箱的支持，所以不能直接和原始数据进行比较、运算，在比较或者运算前需要把非`BigDecimal`的数据转成`BigDecimal`数据：

```BigDecimal.valueOf(100)```

![](C:\Users\ydd\Desktop\第三轮分享\images\3.png)

**乘除**

要先乘后除，以防止除不尽时（而小数计算时大多情况会出现除不尽），被舍弃的小数的影响被后续的乘法进一步放大。
除法的位置需要注意一下，必须加上RoundingMode，否则对于除不尽的情况，会抛出ArithmeticException。具体英文描述是：if the exact quotient（商数，即除法计算结果） does not have a terminating decimal expansion。
```promotionPriceMap.get(productId).multiply(promotionPrice).divide(totalPrice, 2, BigDecimal.ROUND_HALF_UP)```

**精确到指定位数**

![](C:\Users\ydd\Desktop\第三轮分享\images\2.jpg)



   1.4. 基本数据类型与包装数据类型的使用标准

1） 所有的POJO类属性必须使用包装数据类型。

2） RPC方法的返回值和参数必须使用包装数据类型。

3） 所有的局部变量推荐使用基本数据类型。

   2.1. Arrays.asList()使用指南

   2.1.1.

### 简介

`Arrays.asList()`在平时开发中还是比较常见的，我们可以使用它将一个数组转换为一个List集合。

``` 
String[] myArray = { "Apple", "Banana", "Orange" }； 
List<String> myList = Arrays.asList(myArray);
//上面两个语句等价于下面一条语句
List<String> myList = Arrays.asList("Apple","Banana", "Orange");
```

JDK 源码对于这个方法的说明：

```
/**
 *返回由指定数组支持的固定大小的列表。此方法作为基于数组和基于集合的API之间的桥梁，与           Collection.toArray()结合使用。返回的List是可序列化并实现RandomAccess接口。
 */ 
public static <T> List<T> asList(T... a) {
    return new ArrayList<>(a);
}
```

   2.1.2. 《阿里巴巴Java 开发手册》对其的描述

![](F:\javaEE\javaee1907\JAVAEE1907资料\个人分享-第三轮\aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9pYUlkUWZFcmljOVR5cTBQNlRBMmp3WW02TzJpYnpyQlRrTjFXTGV4R3NqaWIyNm5pYU92bzNpYmpERTAyUVVDSTlSU2ljNGZpY0xTcFJiaWJvc1ZxcGdWSGNmRnRXQS82NDA_d3hfZm10PXBuZyZ0cD13.jpg)

   2.1.3. 使用时的注意事项总结

**传递的数组必须是对象数组，而不是基本类型。**

`Arrays.asList()`是泛型方法，传入的对象必须是对象数组。

```
int[] myArray = { 1, 2, 3 };
List myList = Arrays.asList(myArray);
System.out.println(myList.size());//1
System.out.println(myList.get(0));//数组地址值
System.out.println(myList.get(1));//报错：ArrayIndexOutOfBoundsException
int [] array=(int[]) myList.get(0);
System.out.println(array[0]);//1
```

 当传入一个原生数据类型数组时，`Arrays.asList()` 的真正得到的参数就不是数组中的元素，而是数组对象本身！此时List 的唯一元素就是这个数组，这也就解释了上面的代码。

我们使用包装类型数组就可以解决这个问题。

```Integer[] myArray = { 1, 2, 3 };```

**使用集合的修改方法:add()、remove()、clear()会抛出异常。**

```
List myList = Arrays.asList(1, 2, 3);
myList.add(4);//运行时报错：UnsupportedOperationException
myList.remove(1);//运行时报错：UnsupportedOperationException
myList.clear();//运行时报错：UnsupportedOperationException`
```

`Arrays.asList()` 方法返回的并不是 `java.util.ArrayList` ，而是 `java.util.Arrays` 的一个内部类,这个内部类并没有实现集合的修改方法或者说并没有重写这些方法。

```
List myList = Arrays.asList(1, 2, 3);
System.out.println(myList.getClass());//class java.util.Arrays$ArrayList
```

下图是`java.util.Arrays$ArrayList`的简易源码，我们可以看到这个类重写的方法有哪些。

```  
  private static class ArrayList<E> extends AbstractList<E>
        implements RandomAccess, java.io.Serializable
    {
        ...
 
        @Override
        public E get(int index) {
          ...
        }
 
        @Override
        public E set(int index, E element) {
          ...
        }
 
        @Override
        public int indexOf(Object o) {
          ...
        }
 
        @Override
        public boolean contains(Object o) {
           ...
        }
 
        @Override
        public void forEach(Consumer<? super E> action) {
          ...
        }
 
        @Override
        public void replaceAll(UnaryOperator<E> operator) {
          ...
        }
 
        @Override
        public void sort(Comparator<? super E> c) {
          ...
        }
    }
```

我们再看一下`java.util.AbstractList`的`remove()`方法，这样我们就明白为啥会抛出`UnsupportedOperationException`。

```
public E remove(int index) {
    throw new UnsupportedOperationException();
}
```



  2.1.4. 如何正确的将数组转换为ArrayList?

**1. 自己动手实现（教育目的）**

```
//JDK1.5+
static <T> List<T> arrayToList(final T[] array) {
  final List<T> l = new ArrayList<T>(array.length);
 
  for (final T s : array) {
    l.add(s);
  }
  return (l);
}
```

  

```
Integer [] myArray = { 1, 2, 3 };
System.out.println(arrayToList(myArray).getClass());//class java.util.ArrayList
```

**2. 最简便的方法(推荐)**

```
List list = new ArrayList<>(Arrays.asList("a", "b", "c"))

```

**3. 使用 Java8 的Stream(推荐)**

```
Integer [] myArray = { 1, 2, 3 };
List myList = Arrays.stream(myArray).collect(Collectors.toList());
//基本类型也可以实现转换（依赖boxed的装箱操作）
int [] myArray2 = { 1, 2, 3 };
List myList = Arrays.stream(myArray2).boxed().collect(Collectors.toList());
```

 **4. 使用 Guava(推荐)**

对于不可变集合，你可以使用`ImmutableList`类及其`of()`与`copyOf()`工厂方法：（参数不能为空）

```
List<String> il = ImmutableList.of("string", "elements");  // from varargs
List<String> il = ImmutableList.copyOf(aStringArray);      // from array
```

对于可变集合，你可以使用`Lists`类及其`newArrayList()`工厂方法：

```
List<String> l1 = Lists.newArrayList(anotherListOrCollection);    // from collection
List<String> l2 = Lists.newArrayList(aStringArray);               // from array
List<String> l3 = Lists.newArrayList("or", "string", "elements"); // from varargs
```

**5. 使用 Apache Commons Collections**

```
List<String> list = new ArrayList<String>();
CollectionUtils.addAll(list, str);
```





2.2. `Collection.toArray()`方法使用的坑&如何反转数组

[]: https://blog.csdn.net/sinat_43606156/article/details/86540601


   2.3. 不要在` foreach `循环里进行元素的 remove/add 操作

. 【强制】不要在`foreach`循环里进行元素的`remove`/`add`操作。`emove`元素请使用` Iterato`r方式，如果并发操作，需要对Iterator对象加锁。 

正例：

```
List<String> list = new ArrayList<>();      list.add("1");      
list.add("2");    
Iterator<String> iterator = list.iterator();  
while (iterator.hasNext()) {              
String item = iterator.next();                       if (删除元素的条件) {  
	iterator.remove(); 
}      
} 
```

反例：

```
for (String item : list) {         
	if ("1".equals(item)) {      
		list.remove(item);        
    }     
    } 
```

5·  
